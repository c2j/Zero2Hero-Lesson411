/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  TokenProxy,
  TokenProxyInterface,
} from "../../contracts/TokenProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_logic",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101ad3803806101ad833981810160405281019061003291906100d0565b6100418161004760201b60201c565b506100fd565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5550565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009d82610072565b9050919050565b6100ad81610092565b81146100b857600080fd5b50565b6000815190506100ca816100a4565b92915050565b6000602082840312156100e6576100e561006d565b5b60006100f4848285016100bb565b91505092915050565b60a28061010b6000396000f3fe6080604052348015600f57600080fd5b50601c6018601e565b6047565b005b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54905090565b3660008037600080366000845af43d6000803e80600081146067573d6000f35b3d6000fdfea2646970667358221220b11ecbef68e22d0cfbea4f59864f44e01ea0d3586d2581ebbe184cdd8e77441164736f6c63430008110033";

type TokenProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenProxy__factory extends ContractFactory {
  constructor(...args: TokenProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _logic: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenProxy> {
    return super.deploy(_logic, overrides || {}) as Promise<TokenProxy>;
  }
  override getDeployTransaction(
    _logic: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_logic, overrides || {});
  }
  override attach(address: string): TokenProxy {
    return super.attach(address) as TokenProxy;
  }
  override connect(signer: Signer): TokenProxy__factory {
    return super.connect(signer) as TokenProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenProxyInterface {
    return new utils.Interface(_abi) as TokenProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenProxy {
    return new Contract(address, _abi, signerOrProvider) as TokenProxy;
  }
}
